(:lambda ())
(:lambda () 1)
(:lambda () (libcore:eq () ()))
(:lambda (a))
(:lambda (a) (libcore:eq () ()))
(:lambda (a) 1)
(:lambda (a) a)
(:lambda (a) a a)
(:lambda (a) (libcore:eq a a))
(:lambda (a b))
(:lambda (a b) 1)
(:lambda (a b) a)
(:lambda (a b) a b)
(:lambda (a b) (libcore:eq a b))
(:if () () ())
(libcore:apply libcore:eq '(1 2))
(libcore:apply (:lambda ()) ())
(libcore:apply (:lambda () 1) ())
(libcore:apply (:lambda (a)) '(1))
(libcore:apply (:lambda (a) 1) '(1))
(libcore:apply (:lambda (a) a) '(1))
(libcore:apply (:lambda (a) a a) '(1))
(libcore:apply (:lambda (a b)) '(1 2))
(libcore:apply (:lambda (a b) 1) '(1 2))
(libcore:apply (:lambda (a b) a) '(1 2))
(libcore:apply (:lambda (a b) a b) '(1 2))
(libcore:apply (:lambda () (libcore:eq () ())) ())
(libcore:apply (:lambda (a) (libcore:eq () ())) '(1))
(libcore:apply (:lambda (a) (libcore:eq a a)) '(1))
(libcore:apply (:lambda (a b) (libcore:eq a b)) '(1 2))
(libcore:eval ())
(libcore:eval 1)
(libcore:eval 'libcore:version)
(libcore:intern () "a" ())
(libcore:fix (:lambda (a) ()) ())
(libcore:fix (:lambda (a) (:if (libcore:eq 0 a) 0 (libcore:fx-sub a 1))) 100)
(libcore:type-of ())
(libcore:type-of 1)
(libcore:eq () ())
(libcore:eq 1 1)
