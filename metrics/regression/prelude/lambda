(crux:apply (prelude:compile '(lambda () 1)) ())
(crux:apply (prelude:compile '(lambda (a b) (prelude:null b))) '(1 2))
(crux:apply (prelude:compile '(lambda (a b) (crux:sum 1 2))) '(1 2))
(crux:apply (prelude:compile '(lambda (a b) (crux:sum a b))) '(1 2))
(crux:apply (prelude:compile '(lambda (a b) (crux:type-of b))) '(1 2))
(prelude:apply (prelude:compile '(lambda (a) a)) '(1))
(prelude:apply (prelude:compile '(lambda (a b) 1)) '(2 3))
(prelude:apply (prelude:compile '(lambda (a b) (prelude:fixnump b))) '(1 2))
(prelude:apply (prelude:compile '(lambda (a b) (crux:sum a b))) '(1 2))
(prelude:apply (prelude:compile '(lambda (&rest e) e)) '(1 2 3 4 5))
(prelude:apply (prelude:compile '(lambda (a &rest e) e)) '(1 2 3 4 5))
(prelude:apply (prelude:compile '(lambda (a b &rest e) e)) '(1 2 3 4 5))
(prelude:apply (prelude:compile '(lambda (a b c &rest e) e)) '(1 2 3 4 5))
(prelude:apply (prelude:compile '(lambda (a b c d &rest e) e)) '(1 2 3 4 5))
(prelude:apply (prelude:compile '(lambda (a b c d e &rest f) f)) '(1 2 3 4 5))
(crux:type-of (prelude:apply (prelude:compile '(lambda (a) (a))) (crux:cons (:lambda () 1) ())))
(crux:eval (prelude:compile '((lambda (a &rest b) (a b)) crux:car 1 2 3)))
(crux:eval (prelude:compile '((lambda (a &rest b) (a b)) crux:car (crux:sum 2 1) 2 1)))
