(lib:type-of ((:lambda () (prelude:compile '(define-macro prelude:a-macro () prelude:a-macro)) (prelude:macro-function 'prelude:a-macro ()))))
((:lambda () (prelude:compile '(define-macro no-arg-macro () ''no-arg-macro)) (prelude:macroexpand '(no-arg-macro) ())))
((:lambda () (prelude:compile '(define-macro no-arg-macro () ''no-arg-macro)) (lib:eval (prelude:compile '(no-arg-macro)))))
((:lambda () (prelude:compile '(define-macro arg-macro (arg) arg)) (prelude:macroexpand '(arg-macro (lib:sum 1 2)) ())))
((:lambda () (prelude:compile '(define-macro arg-macro (arg) arg)) (lib:eval (prelude:compile '(arg-macro (lib:sum 1 2))))))
((:lambda () (prelude:compile '(define-macro rest-macro (&rest args) (lib:cons '(lambda (&rest rest) rest) args))) (lib:eval (prelude:compile '(rest-macro (lib:sum 1 2))))))
((:lambda () (prelude:compile '(define-macro rest-macro (&rest args) (lib:cons '(lambda (&rest rest) rest) args))) (lib:eval (prelude:compile '(rest-macro (lib:sum 1 2) (lib:sum 3 4))))))
((:lambda () (prelude:compile '(define-macro rest-macro (&rest args) (lib:cons '(lambda (&rest rest) rest) args))) (lib:eval (prelude:compile '(rest-macro 1 2 3)))))
