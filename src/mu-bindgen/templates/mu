//
// this file is autogenerated by mu-bindgen
// modifications will likely be overwritten
//
use crate::{
    core::{
        env::Env,
        exception::{self, Condition, Exception},
        frame::Frame,
        symbols::CoreFnDef,
        types::Tag,
    },
    features::feature::Feature,
    types::{
        cons::{Cons, Core as _},
        indirect_vector::Core as _,
        struct_::{Core as _, Struct},
        symbol::{Core as _, Symbol},
        vector::Vector,
    },
};

use {{ crate.name }}::{self};

// env function dispatch table
lazy_static! {
    static ref {{ crate.symbols }}_SYMBOLS: Vec<CoreFnDef> = vec![("uname", 0, {{ crate.struct_ }}::uname)];
}

pub struct {{ crate.struct_ }} {}

pub trait Core {
    fn feature() -> Feature;
}

impl Core for {{ crate.name }} {
    fn feature() -> Feature {
        Feature {
            symbols: {{ crate.symbols }}_SYMBOLS.to_vec(),
            ns: "{{ crate.name }}".to_string(),
        }
    }
}

pub trait CoreFunction {
{{ crate.prototypes }}
}

impl CoreFunction for {{ crate.struct_ }} {
{{ crate.functions }}
}