;;;  SPDX-FileCopyrightText: Copyright 2023 James M. Putnam (putnamjm.design@gmail.com)
;;;  SPDX-License-Identifier: MIT

;;;
;;; quasiquote
;;;
(lib:intern (lib:find-ns "") "%quasi%" ())

(lib:intern prelude "%list"
   (:lambda (form)
     `(,form)))

(lib:intern prelude "%quasi-func-map"
   (:lambda (key map)
     (lib:cdr (prelude:assoc key map))))

(lib:intern prelude "%quasi-read"
   (:lambda (stream)
     ((:lambda (ch syntax-map)
        (:if (prelude:null ch)
             (prelude:error stream "backquote: early end of file~%" ())
             ((:lambda (type-map)
                (:if (prelude:null type-map)
                     `(:form ,(prelude:%read-dispatch ch stream))
                     (lib:apply (lib:cdr type-map) ())))
                (prelude:assoc ch syntax-map))))
        (prelude:%read-consume-ws stream)
        `(,(lib:cons #\( (:lambda () `(:list ,(prelude:%quasi-read-list stream))))
           ,(lib:cons #\) (:lambda () `(:list-)))
           ,(lib:cons #\, (:lambda ()
                           ((:lambda (ch)
                             (:if (prelude:null ch)
                                  (prelude:error stream "backquote: early end of file~%" ())
                                  (:if (lib:eq #\@ ch)
                                       `(:comma@ ,(prelude:read stream () ()))
                                       ((:lambda ()
                                          (prelude:unread-char ch stream)
                                          `(:form ,(prelude:read stream () ())))))))
                            (prelude:read-char stream () ()))))
           ,(lib:cons #\' (:lambda () `(:qquote ,(prelude:%quasi-read stream))))
           ,(lib:cons #\` (:lambda () `(:quasi ,(prelude:read stream () ()))))))))

(lib:intern prelude "%quasi-read-list"
   (:lambda (stream)
     ((:lambda (syntax-map)
         (lib:cdr
          (lib:fix
           (:lambda (loop)
             ((:lambda (eol list)
                (:if eol
                     loop
                     ((:lambda (syntax)
                        ((:lambda (type expr)
                           (:if (prelude:null syntax)
                                (prelude:error stream "qquote: early end of file~%" ())
                                ((:lambda (type-fn)
                                   (lib:apply type-fn `(,expr ,list)))
                                 (prelude:%quasi-func-map type syntax-map))))
                         (lib:car syntax)
                         (lib:cdr syntax)))
                      (prelude:%quasi-read stream))))
              (lib:car loop)
              (lib:cdr loop)))
           ())))
      `(,(lib:cons :comma   (:lambda (expr list)
                             (lib:cons () (lib:append list (prelude:%list `(:l-comma ,(lib:car expr)))))))
         ,(lib:cons :comma@ (:lambda (expr list)
                             (lib:cons () (lib:append list (prelude:%list `(:comma@ ,(lib:car expr)))))))
         ,(lib:cons :form   (:lambda (expr list)
                             (lib:cons () (lib:append list (prelude:%list `(:l-form ,(lib:car expr)))))))
         ,(lib:cons :list   (:lambda (expr list)
                             (:if (prelude:null (lib:car expr))
                                  (lib:cons () (lib:append list (prelude:%list `(:l-form ()))))
                                  (:if (prelude:consp (lib:car expr))
                                       ((:lambda (form)
                                          (lib:cons () (lib:append list (prelude:%list `(:l-form ,form)))))
                                        (prelude:mapcar (:lambda (expr) (lib:nth 1 expr)) (lib:car expr)))
                                       (lib:cons () (lib:append list (prelude:%list `(:l-list ,(lib:car expr)))))))))
         ,(lib:cons :list-  (:lambda (expr list)
                             (lib:cons :t list)))
         ,(lib:cons :quasi  (:lambda (expr list)
                             (lib:cons () (lib:append list `(,(prelude:%quasi-read stream))))))))))

(lib:intern prelude "%quasi-compile"
   (:lambda (quasi-expr)
     ((:lambda (type expr compiler-map)
        ((:lambda (type-fn)
           (:if (prelude:null type-fn)
                (prelude:error type "backquote: unmapped type ~A~%" `(,type))
                (lib:apply type-fn `(,expr))))
         (prelude:%quasi-func-map type compiler-map)))
      (lib:nth 0 quasi-expr)
      (lib:nth 1 quasi-expr)
      `(,(lib:cons :l-comma  (:lambda (expr) `(lib:cons ,expr ())))
         ,(lib:cons :l-list  (:lambda (expr)
                              ((:lambda (loop)
                                 (lib:apply loop `(,loop ,expr)))
                               (:lambda (loop list)
                                 (:if (prelude:null list)
                                      list
                                      `(lib:append
                                        ,(prelude:%quasi-compile (lib:car list))
                                        ,(lib:apply loop `(,loop ,(lib:cdr list)))))))))
         ,(lib:cons :l-form  (:lambda (expr)
                              ((:lambda (quote)
                               `(lib:cons ,quote ()))
                               `(:quote ,expr))))
         ,(lib:cons :comma@ (:lambda (expr) expr))
         ,(lib:cons :list    (:lambda (list)
                              ((:lambda (loop)
                                 (lib:apply loop `(,loop ,list)))
                               (:lambda (loop list)
                                 (:if (prelude:null list)
                                      list
                                      `(lib:append
                                        ,(prelude:%quasi-compile (lib:car list))
                                        ,(lib:apply loop `(,loop ,(lib:cdr list)))))))))
         ,(lib:cons :form    (:lambda (expr)
                              `(:quote ,expr)))
         ,(lib:cons :quasi   (:lambda (expr)
                              ((:lambda (type)
                                 (:if (lib:eq :form type)
                                      (lib:cdr expr)
                                      (:if (lib:eq :quote type)
                                           (prelude:%quasi-compile expr)
                                           ())))
                               (lib:car expr))))
         ,(lib:cons :qquote   (:lambda (expr)
                               `(:quote ,(prelude:%quasi-compile expr))))))))

(lib:intern prelude "%read-quasi"
   (:lambda (char stream)
     `(%quasi% ,(prelude:%quasi-read stream))))
