(core:type-of prelude:append)	:func
(core:type-of prelude:assoc)	:func
(core:type-of prelude:dropl)	:func
(core:type-of prelude:dropr)	:func
(core:type-of prelude:findl)	:func
(core:type-of prelude:findr)	:func
(core:type-of prelude:foldl)	:func
(core:type-of prelude:foldr)	:func
(core:type-of prelude:last)	:func
(core:type-of prelude:mapc)	:func
(core:type-of prelude:mapcar)	:func
(core:type-of prelude:mapl)	:func
(core:type-of prelude:maplist)	:func
(core:type-of prelude:positionl)	:func
(core:type-of prelude:positionr)	:func
(core:type-of prelude:reverse)	:func
(prelude:append '(() ()))	:nil
(prelude:append '(() (1 2 3)))	(1 2 3)
(prelude:append '((1 2 3) ()))	(1 2 3)
(prelude:append '((1 2 3) (4 5 6)))	(1 2 3 4 5 6)
(prelude:append '((1 2) 3))	(1 2 . 3)
(prelude:dropl '(1 2 3) 0)	(1 2 3)
(prelude:dropl '(1 2 3) 1)	(2 3)
(prelude:dropr '(1 2 3) 0)	(1 2 3)
(prelude:dropr '(1 2 3) 1)	(1 2)
(prelude:findr prelude:symbolp '(1 2 3))	:nil
(prelude:findr prelude:symbolp '(a b c))	c
(prelude:findl prelude:symbolp '(1 2 3))	:nil
(prelude:findl prelude:symbolp '(a b c))	a
(prelude:foldl (:lambda (el acc) (:if (prelude:null acc) :nil (prelude:symbolp el))) :t '(1 2 3))	:nil
(prelude:foldl (:lambda (el acc) (:if (prelude:null acc) :nil (prelude:symbolp el))) :t '(a b c))	:t
(prelude:foldl (:lambda (el acc) (core:cons el acc)) () '(1 2 3 4))	(4 3 2 1)
(prelude:foldl (:lambda (el acc) (core:cons el acc)) () '(1))	(1)
(prelude:foldl (:lambda (el acc) (core:cons el acc)) () ())	:nil
(prelude:foldl (:lambda (x y) (core:fx-add x y)) 0 '(1 2 3))	6
(prelude:foldr (:lambda (el acc) (:if (prelude:null acc) :nil (prelude:symbolp el))) :t '(1 2 3))	:nil
(prelude:foldr (:lambda (el acc) (:if (prelude:null acc) :nil (prelude:symbolp el))) :t '(a b c))	:t
(prelude:foldr (:lambda (el acc) (core:cons el acc)) () '(1 2 3 4))	(1 2 3 4)
(prelude:foldr (:lambda (el acc) (core:cons el acc)) () '(1))	(1)
(prelude:foldr (:lambda (el acc) (core:cons el acc)) () ())	:nil
(prelude:foldr (:lambda (x y) (core:fx-add x y)) 0 '(1 2 3))	6
(prelude:last '(1 2 . 3))	(2 . 3)
(prelude:last '(1 2 3))	(3)
(prelude:last '(1))	(1)
(prelude:last ())	:nil
(prelude:mapc (:lambda (el) el) '(1 2 3))	(1 2 3)
(prelude:mapc (:lambda (el) el) '(1 2 3))	(1 2 3)
(prelude:mapc (:lambda (el) el) '(1))	(1)
(prelude:mapc (:lambda (el) el) ())	:nil
(prelude:mapcar (:lambda (el) el) '(1 2 3))	(1 2 3)
(prelude:mapcar (:lambda (el) el) '(1))	(1)
(prelude:mapcar (:lambda (el) el) ())	:nil
(prelude:mapl (:lambda (el) el) '(1 2 3))	(1 2 3)
(prelude:mapl (:lambda (el) el) '(1))	(1)
(prelude:mapl (:lambda (el) el) ())	:nil
(prelude:maplist (:lambda (el) el) '(1 2 3))	((1 2 3) (2 3) (3))
(prelude:maplist (:lambda (el) el) '(1))	((1))
(prelude:maplist (:lambda (el) el) ())	:nil
(prelude:positionl (:lambda (el) (core:eq el 'foo)) ())	:nil
(prelude:positionl (:lambda (el) (core:eq el 'foo)) '(1))	:nil
(prelude:positionl (:lambda (el) (core:eq el 'foo)) '(foo))	0
(prelude:positionl (:lambda (el) (core:eq el 'foo)) '(1 foo))	1
(prelude:positionl prelude:zerop '(1 2 0 4 5))	2
(prelude:positionl prelude:zerop '(0 2 0 4 5))	0
(prelude:positionl prelude:zerop '(1 2 3 4 0))	4
(prelude:positionr (:lambda (el) (core:eq el 'foo)) ())	:nil
(prelude:positionr (:lambda (el) (core:eq el 'foo)) '(1))	:nil
(prelude:positionr (:lambda (el) (core:eq el 'foo)) '(foo))	0
(prelude:positionr (:lambda (el) (core:eq el 'foo)) '(1 foo))	1
(prelude:positionr prelude:zerop '(1 2 0 4 5))	2
(prelude:positionr prelude:zerop '(0 2 0 4 5))	2
(prelude:positionr prelude:zerop '(0 2 3 4 5))	0
(prelude:reverse '(1 2 3 4))	(4 3 2 1)
(core:cdr (prelude:assoc #\a '((#\a . foo))))	foo
(core:cdr (prelude:assoc #\a '(() (#\a . foo))))	foo
(core:cdr (prelude:assoc #\a ()))	:nil
