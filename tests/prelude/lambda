(core:apply (prelude:compile '(lambda () 1)) ())	1
(core:apply (prelude:compile '(lambda (a b) (prelude:null b))) '(1 2))	:nil
(core:apply (prelude:compile '(lambda (a b) (core:sum 1 2))) '(1 2))	3
(core:apply (prelude:compile '(lambda (a b) (core:sum a b))) '(1 2))	3
(core:apply (prelude:compile '(lambda (a b) (core:type-of b))) '(1 2))	:fixnum
(prelude:apply (prelude:compile '(lambda ())) ())	:nil
(prelude:apply (prelude:compile '(lambda () 1)) ())	1
(prelude:apply (prelude:compile '(lambda (a) a)) '(1))	1
(prelude:apply (prelude:compile '(lambda (a) 1)) '(2))	1
(prelude:apply (prelude:compile '(lambda (a b) 1)) '(2 3))	1
(prelude:apply (prelude:compile '(lambda (a b) (prelude:fixnump b))) '(1 2))	:t
(prelude:apply (prelude:compile '(lambda (a b) (prelude:null b))) '(1 2))	:nil
(prelude:apply (prelude:compile '(lambda (a b) (core:sum 1 2))) '(1 2))	3
(prelude:apply (prelude:compile '(lambda (a b) (core:sum a b))) '(1 2))	3
(prelude:apply (prelude:compile '(lambda (a b) (core:type-of b))) '(1 2))	:fixnum
(prelude:apply (prelude:compile '(lambda (&rest e) e)) '(1 2 3 4 5))	(1 2 3 4 5)
(prelude:apply (prelude:compile '(lambda (a &rest e) e)) '(1 2 3 4 5))	(2 3 4 5)
(prelude:apply (prelude:compile '(lambda (a b &rest e) e)) '(1 2 3 4 5))	(3 4 5)
(prelude:apply (prelude:compile '(lambda (a b c &rest e) e)) '(1 2 3 4 5))	(4 5)
(prelude:apply (prelude:compile '(lambda (a b c d &rest e) e)) '(1 2 3 4 5))	(5)
(prelude:apply (prelude:compile '(lambda (a b c d e &rest f) f)) '(1 2 3 4 5))	:nil
(prelude:apply (prelude:compile '(lambda (a b c d &rest f) (core:write f () core:standard-output))) '(1 2 3 4 5))	(5)(5)
(core:type-of (prelude:apply (prelude:compile '(lambda (a) (a))) (core:cons (:lambda () 1) ())))	:fixnum
