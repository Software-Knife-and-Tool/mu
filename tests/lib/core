(lib:eq 1 1)	:t
(lib:eq 1 2)	:nil
(lib:eval 'lib:std-in)	#<stream: id: 0 type: std-in dir: :input state: open>
(lib:eval ())	:nil
(lib:fix (:lambda (l) (:if l ((:lambda () (lib:write (lib:car l) () lib:std-out) (lib:cdr l))) ())) '(1 2 3 4))	1234:nil
(lib:fix (:lambda (l) (:if l ((:lambda () (lib:write (lib:car (lib:car l)) () lib:std-out) (lib:cdr l))) ())) '((0 . 1) (2 . 3)))	02:nil
(lib:apply lib:eq '(1 2))	:nil
(lib:apply lib:fx-add '(1 2))	3
(lib:type-of #\a)	:char
(lib:type-of '(1 2 3))	:cons
(lib:type-of '(:lambda ()))	:cons
(lib:type-of 'lib:apply)	:symbol
(lib:type-of ())	:null
(lib:type-of 1)	:fixnum
(lib:type-of :typeof)	:keyword
(lib:type-of lib:std-in)	:stream
(lib:type-of lib:hp-info)	:func
(lib:type-of "type-of")	:vector
(lib:view ())	#(:t :nil nil :nil)
(lib:view :keyword)	#(:t :keyword keyword :keyword)
(lib:view #\a)	#(:t a)
(lib:view "abcdefg")	#(:t 7 :char)
(lib:view "abcdefgh")	#(:t 8 :char)
(lib:view '(1 2))	#(:t 1 (2))
(lib:view 1234)	#(:t 1234)
(lib:view 1.0)	#(:t 1.0000)
(lib:view #(:t 1 2))	#(:t 2 :t)
(lib:view #s(:foo 1 2))	#(:t :foo #(:t 1 2))
(lib:view 'a)	#(:t :nil a :UNBOUND)
(lib:view 'lib:eq)	#(:t :lib eq #<:function :lib [req:2, form:eq]>)
(lib:view lib:eq)	#(:t 2 :eq)
(lib:view lib:std-in)	#(:t 0 :input :nil)
(lib:hp-size ())	8
(lib:hp-size :keyword)	8
(lib:hp-size #\a)	8
(lib:hp-size '(1 2))	8
(lib:hp-size 1234)	8
(lib:hp-size 1.0)	8
(lib:hp-size #s(:foo 1 2))	52
(lib:hp-size "abcdefg")	8
(lib:hp-size "abcdefgh")	26
(lib:hp-size #(:t 1 2))	34
(lib:hp-size 'a)	27
(lib:hp-size 'lib:eq)	45
(lib:hp-size lib:eq)	18
(lib:hp-size lib:std-in)	8
(lib:with-ex (:lambda (cond obj) (lib:write cond () lib:std-out)) (:lambda () (lib:fx-div 1 1)))	1
(lib:repr :t (lib:repr :vector :t))	:t
(lib:type-of lib:unbound)	:func
(lib:type-of lib:intern)	:func
(lib:type-of lib:make-ns)	:func
(lib:type-of lib:ns-syms)	:func
(lib:type-of lib:ns-find)	:func
(lib:type-of lib:ns-map)	:func
