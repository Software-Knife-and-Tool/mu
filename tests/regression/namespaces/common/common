(mu:boundp 't)	t
(mu:boundp 'nil)	nil
(mu:type-of append)	:struct
(mu:type-of list)	:struct
(mu:type-of list*)	:struct
(mu:type-of vector)	:struct
(mu:type-of format)	:struct
(mu:type-of funcall)	:struct
(mu:type-of not)	:func
(mu:type-of (core:macro-function 'defconstant ()))	:struct
(mu:type-of (core:macro-function 'defmacro ()))	:struct
(mu:type-of (core:macro-function 'defun ()))	:struct
(mu:type-of (core:macro-function 'prog1 ()))	:struct
(mu:type-of (core:macro-function 'prog2 ()))	:struct
(if t t)	:t
(if () t)	:nil
(if 1 t)	:t
(if (mu:eq 1 1) t)	:t
(if (mu:eq (mu:add 1 1) 2) 2)	2
(if (mu:eq (mu:add 1 1) 2) 5)	5
(if (mu:eq (mu:add 1 1) 2) (mu:add 1 2) 5)	3
(if (mu:eq (mu:add 1 2) 2) (mu:add 1 2) 5)	5
