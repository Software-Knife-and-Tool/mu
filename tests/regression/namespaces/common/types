(common:typep '(1 2) :cons)	:t
(common:typep 1 :fixnum)	:t
(common:typep (mu:make-struct :struct ()) :struct)	:t
(common:typep "abc" :vector)	:t
(common:typep #(:t 1 2 3) :vector)	:t
(common:typep mu:*standard-input* :stream)	:t
(common:typep #\a :char)	:t
(common:typep 1.024e23 :float)	:t
(common:typep :foo :keyword)	:t
(common:typep 'foo :symbol)	:t
(common:typep () :null)	:t
(common:typep () 'symbol)	:t
(common:typep () '(satisfies core:null))	:t
(common:typep 1 '(satisfies core:fixnump))	:t
(common:typep 1024e23 '(satisfies core:floatp))	:t
(common:typep '(1 2 3) '(satisfies core:consp))	:t
(common:typep #(:t 1 2 3) '(satisfies core:vectorp))	:t
(common:typep #\a '(satisfies core:charp))	:t
(common:typep () '(not symbol))	:nil
(common:typep () '(and))	:t
(common:typep () '(and (satisfies core:null)))	:t
(common:typep () '(and :null (satisfies core:null)))	:t
(common:typep () '(or))	:nil
(common:typep () '(or (satisfies core:null)))	:t
(common:typep () '(or :null (satisfies core:null)))	:t
(common:typep 1234 'number)	:t
(common:typep 1.024 'number)	:t
(common:typep 1234 'integer)	:t
(common:typep #(:t 1 2 3) 'sequence)	:t
(common:typep "123" 'sequence)	:t
(common:typep '(1 2 3) 'sequence)	:t
(common:typep "abc" 'string)	:t
(common:typep mu:*standard-input* 'stream)	:t
(common:typep :sym 'symbol)	:t
(common:typep 'sym 'symbol)	:t
(common:typep (core:read (mu:open :string :input "#*1111" :t) () ()) 'bit-vector)	:t
