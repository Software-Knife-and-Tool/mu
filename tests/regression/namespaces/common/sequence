(length ())	0
(length '(1))	1
(length #(:t))	0
(length #(:t 1))	1
(core:apply length '(#(:t 1)))	1
(elt '(1) 0)	1
(elt #(:t 1) 0)	1
(core:apply elt '(#(:t 1) 0))	1
(%find () 1)	:nil
(%find '(1) 1)	1
(%find '(1) 0)	:nil
(%find #(:t) 0)	:nil
(%find #(:t 1) 1)	1
(%find #(:t 1) 0)	:nil
(%find-if () core:null)	:nil
(%find-if '(1) (:lambda (item) (mu:eq item 1)))	1
(%find-if '(1) (:lambda (item) (mu:eq item 0)))	:nil
(%find-if #(:t) core:null)	:nil
(%find-if #(:t 1) (:lambda (item) (mu:eq item 1)))	1
(%find-if #(:t 2) (:lambda (item) (mu:eq item 1)))	:nil
(%count () 1)	0
(%count '(1) 1)	1
(%count '(1) 0)	0
(%count #(:t) 0)	0
(%count #(:t 1) 1)	1
(%count #(:t 1) 0)	0
(%count-if () core:null)	0
(%count-if '(1) (:lambda (item) (mu:eq item 1)))	1
(%count-if '(1) (:lambda (item) (mu:eq item 0)))	0
(%count-if #(:t) core:null)	0
(%count-if #(:t 1) (:lambda (item) (mu:eq item 1)))	1
(%count-if #(:t 2) (:lambda (item) (mu:eq item 1)))	0
(%position () 1)	:nil
(%position '(1) 1)	0
(%position '(1) 0)	:nil
(%position #(:t) 0)	:nil
(%position #(:t 1) 1)	0
(%position #(:t 1) 0)	:nil
(%position-if () core:null)	:nil
(%position-if '(1) (:lambda (item) (mu:eq item 1)))	0
(%position-if '(1) (:lambda (item) (mu:eq item 0)))	:nil
(%position-if #(:t) core:null)	:nil
(%position-if #(:t 1) (:lambda (item) (mu:eq item 1)))	0
(%position-if #(:t 2) (:lambda (item) (mu:eq item 1)))	:nil
(%remove () 1)	:nil
(%remove '(1) 1)	:nil
(%remove '(1) 0)	(1)
(%remove #(:t) 0)	#(:t)
(%remove #(:t 1) 1)	#(:t)
(%remove #(:t 1) 0)	#(:t 1)
(%remove-if () core:null)	:nil
(%remove-if '(1) (:lambda (item) (mu:eq item 1)))	:nil
(%remove-if '(1) (:lambda (item) (mu:eq item 0)))	(1)
(%remove-if #(:t) core:null)	#(:t)
(%remove-if #(:t 1) (:lambda (item) (mu:eq item 1)))	#(:t)
(%remove-if #(:t 2) (:lambda (item) (mu:eq item 1)))	#(:t 2)
(%substitute () 0 1)	:nil
(%substitute '(1) 0 1)	(0)
(%substitute '(1 2) 0 2)	(1 0)
(%substitute #(:t) 0 1)	#(:t)
(%substitute #(:t 1) 0 1)	#(:t 0)
(%substitute #(:t 1 2) 0 2)	#(:t 1 0)
(%substitute-if () 0 core:null)	:nil
(%substitute-if '(1) 0 (:lambda (item) (mu:eq item 1)))	(0)
(%substitute-if '(1 2) 0 (:lambda (item) (mu:eq item 1)))	(0 2)
(%substitute-if #(:t) 0 core:null)	#(:t)
(%substitute-if #(:t 1) 0 (:lambda (item) (mu:eq item 1)))	#(:t 0)
(%substitute-if #(:t 1 2) 0 (:lambda (item) (mu:eq item 2)))	#(:t 1 0)
(reverse ())	:nil
(reverse '(1))	(1)
(reverse '(1 2))	(2 1)
(reverse #(:t))	#(:t)
(reverse #(:t 1))	#(:t 1)
(reverse #(:t 1 2))	#(:t 2 1)
