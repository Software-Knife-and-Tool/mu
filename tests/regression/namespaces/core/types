(mu:type-of core:%deftype)	:func
(mu:type-of core:%typep)	:func
(mu:type-of core:type-of)	:func
(mu:type-of (mu:eval (core:compile '((:lambda () (core:%deftype "test" '((:v . :t))) (core:%make-type "test" '((:v . 2))))))))	:struct
(core:type-of (mu:eval (core:compile '((:lambda () (core:%deftype "test" '((:v . :t))) (core:%make-type "test" '((:v . 2))))))))	test
((:lambda () (core:%deftype "test" '((:v . :t))) (core:%type-prop :v (core:%make-type "test" '((:v . 2))))))	(:v . 2)
(core:type-of 1)	fixnum
(core:type-of 1.0)	float
(core:type-of mu:*standard-input*)	stream
(core:type-of #(:t 1 2))	vector
(core:type-of mu:add)	function
(core:type-of (mu:make-struct :foo '()))	:foo
(core:typep '(1 2) :cons)	:t
(core:typep 1 :fixnum)	:t
(core:typep (mu:make-struct :struct ()) :struct)	:t
(core:typep "abc" :vector)	:t
(core:typep #(:t 1 2 3) :vector)	:t
(core:typep mu:*standard-input* :stream)	:t
(core:typep #\a :char)	:t
(core:typep 1.024e23 :float)	:t
(core:typep :foo :keyword)	:t
(core:typep 'foo :symbol)	:t
(core:typep () :null)	:t
(core:typep () 'symbol)	:t
(core:typep () '(satisfies core:null))	:t
(core:typep 1 '(satisfies core:fixnump))	:t
(core:typep 1024e23 '(satisfies core:floatp))	:t
(core:typep '(1 2 3) '(satisfies core:consp))	:t
(core:typep #(:t 1 2 3) '(satisfies core:vectorp))	:t
(core:typep #\a '(satisfies core:charp))	:t
(core:typep () '(not symbol))	:nil
(core:typep () '(and))	:t
(core:typep () '(and (satisfies core:null)))	:t
(core:typep () '(and :null (satisfies core:null)))	:t
(core:typep () '(or))	:nil
(core:typep () '(or (satisfies core:null)))	:t
(core:typep () '(or :null (satisfies core:null)))	:t
(core:typep 1234 'number)	:t
(core:typep 1.024 'number)	:t
(core:typep 1234 'integer)	:t
(core:typep #(:t 1 2 3) 'sequence)	:t
(core:typep "123" 'sequence)	:t
(core:typep '(1 2 3) 'sequence)	:t
(core:typep "abc" 'string)	:t
(core:typep mu:*standard-input* 'stream)	:t
(core:typep :sym 'symbol)	:t
(core:typep 'sym 'symbol)	:t
(core:typep (core:read (mu:open :string :input "#*1111" :t) () ()) 'bit-vector)	:t
