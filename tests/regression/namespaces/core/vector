(mu:type-of core:make-vector)	:func
(mu:type-of core:vector-slice)	:func
(mu:type-of core:vector-length)	:func
(mu:type-of core:vector-ref)	:func
(mu:type-of core:vectorp)	:func
(mu:type-of core:bit-vector-p)	:func
(mu:type-of core:vector-displaced-p)	:func
(core:make-vector '(1 2 3))	#(:byte 1 2 3)
(core:make-vector '(1024 2 3))	#(:fixnum 1024 2 3)
(core:make-vector '(#\a #\b #\c))	"abc"
(core:make-vector '(1.0 1.0 1.0))	#(:float 1.0000 1.0000 1.0000)
(core:make-vector '(1.0 #\a ()))	#(:t 1.0000 a :nil)
(core:%typep (core:make-vector '(1 2 3)))	:nil
(core:vector-type #(:t 1 2 3))	:t
(core:vector-type (core:read (mu:open :string :input "#*11101" :t) () ()))	bit
(core:vector-type (core:vector-slice #(:fixnum 1 2 3) 1 2))	:fixnum
(core:vector-slice #(:fixnum 1 2 3) 1 2)	#s(:<type> #(:t %vector ((:base . #(:fixnum 1 2 3)) (:disp 1 . 2) (:bitvec))))
(core:vector-ref (core:make-vector '(1 2 3)) 1)	2
(core:vectorp (core:make-vector '(1 2 3)))	:t
(core:vectorp (mu:make-vector :t '(1 2 3)))	:t
(core:vector-ref (core:vector-slice #(:fixnum 1 2 3) 1 2) 0)	2
(core:vectorp (core:read (mu:open :string :input "#*1111" :t) () ()))	:t
(core:vector-length (core:read (mu:open :string :input "#*1111" :t) () ()))	4
(core:vector-ref (core:read (mu:open :string :input "#*1111" :t) () ()) 0)	1
(core:vector-ref (core:read (mu:open :string :input "#*1000" :t) () ()) 1)	0
