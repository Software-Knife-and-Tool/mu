(crux:eq 1 1)	:t
(crux:eq 1 2)	:nil
(crux:eval 'crux:*standard-input*)	#<stream: 0 :standard-input :input :open>
(crux:eval ())	:nil
(crux:fix (:lambda (l) (:if l ((:lambda () (crux:write (crux:car l) () crux:*standard-output*) (crux:cdr l))) ())) '(1 2 3 4))	1234:nil
(crux:fix (:lambda (l) (:if l ((:lambda () (crux:write (crux:car (crux:car l)) () crux:*standard-output*) (crux:cdr l))) ())) '((0 . 1) (2 . 3)))	02:nil
(crux:apply crux:eq '(1 2))	:nil
(crux:apply crux:sum '(1 2))	3
(crux:type-of #\a)	:char
(crux:type-of '(1 2 3))	:cons
(crux:type-of '(:lambda ()))	:cons
(crux:type-of 'crux:apply)	:symbol
(crux:type-of ())	:null
(crux:type-of 1)	:fixnum
(crux:type-of :typeof)	:keyword
(crux:type-of crux:*standard-input*)	:stream
(crux:type-of crux:heap-info)	:func
(crux:type-of "type-of")	:vector
(crux:type-of (crux:find-ns "crux"))	:ns
(crux:view ())	#(:t "" nil :nil)
(crux:view :keyword)	#(:t "keyword" keyword :keyword)
(crux:view #\a)	#(:t a)
(crux:view "abcdefg")	#(:t 7 :char)
(crux:view "abcdefgh")	#(:t 8 :char)
(crux:view '(1 2))	#(:t 1 (2))
(crux:view 1234)	#(:t 1234)
(crux:view 1.0)	#(:t 1.0000)
(crux:view #(:t 1 2))	#(:t 2 :t)
(crux:view #s(:foo 1 2))	#(:t :foo #(:t 1 2))
(crux:view 'a)	#(:t "" a :UNBOUND)
(crux:view 'crux:eq)	#(:t "crux" eq #<:function :crux [req:2, form:eq]>)
(crux:view crux:eq)	#(:t 2 #(:t crux eq 0))
(crux:view crux:*standard-input*)	#(:t 0 :input :nil)
(crux:heap-size ())	8
(crux:heap-size :keyword)	8
(crux:heap-size #\a)	8
(crux:heap-size '(1 2))	8
(crux:heap-size 1234)	8
(crux:heap-size 1.0)	8
(crux:heap-size #s(:foo 1 2))	52
(crux:heap-size "abcdefg")	8
(crux:heap-size "abcdefgh")	26
(crux:heap-size #(:t 1 2))	34
(crux:heap-size 'a)	27
(crux:heap-size 'crux:eq)	45
(crux:heap-size crux:eq)	18
(crux:heap-size crux:*standard-input*)	8
(crux:unwind-protect (:lambda (cond obj) (crux:write cond () crux:*standard-output*)) (:lambda () (crux:quotient 1 1)))	1
(crux:repr :t (crux:repr :vector :t))	:t
(crux:type-of crux:find)	:func
(crux:type-of crux:find-ns)	:func
(crux:type-of crux:intern)	:func
(crux:type-of crux:make-ns)	:func
(crux:type-of crux:ns-map)	:func
(crux:type-of crux:symbols)	:func
(crux:type-of crux:unintern)	:func
